/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CFlow.jj */
/*@egen*/options
{
	LOOKAHEAD=2;
	FORCE_LA_CHECK=true;
}

PARSER_BEGIN(CFlow)

	public class CFlow/*@bgen(jjtree)*/implements CFlowTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCFlowState jjtree = new JJTCFlowState();

/*@egen*/
		public static void main(String args[]) throws ParseException {
			if(args.length != 1){
				System.out.println("usage: cflow <program_path>");
				return;
			}
			String path = args[0];
			System.out.print("Write the regex: ");
			CFlow regexpRecog = new CFlow(System.in);
			SimpleNode root = regexpRecog.Recognize();

			root.dump("");
		}
	}
	
PARSER_END(CFlow)

SKIP:
{
" " | "\t" | "\r"
}

TOKEN:
{
	<LINESTART: 	<NEG>> |
	<LINEEND: 		"$"> |
	<OR:			"|"> |
	<QUANTIFIER:	("+" | "*" | "?")> |
	<NEG:			"^"> |
	<OPEN_GROUP:	"("> |
	<CLOSE_GROUP:	")"> |
	<OPEN_SET:		"["> |
	<CLOSE_SET:		"]"> |
	<OPEN_REPEAT:	"{"> |
	<CLOSE_REPEAT:	"}"> |

	<CHARACTER:		(["A"-"Z"] | ["a"-"z"])> |
	<NUMBER:		["0"-"9"]> |
	<ANY:			(".")> |

	/*<WORD:			"\\w"> |
	<NON_WORD:		"\\W"> |
	<DIGIT:			"\\d"> |
	<NON_DIGIT:		"\\D"> |*/
  	<LF: "\n">
}

SimpleNode Recognize() : {/*@bgen(jjtree) Recognize */
  SimpleNode jjtn000 = new SimpleNode(JJTRECOGNIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Recognize */
        try {
/*@egen*/
	[<LINESTART>] RegExp() [<LINEEND>] <LF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RegExp() : {/*@bgen(jjtree) RegExp */
  SimpleNode jjtn000 = new SimpleNode(JJTREGEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) RegExp */
        try {
/*@egen*/
	Quantifiable() [[/*@bgen(jjtree) Or */
                         {
                           SimpleNode jjtn001 = new SimpleNode(JJTOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/<OR>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/    ] RegExp()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Quantifiable(): {/*@bgen(jjtree) Quantifiable */
  SimpleNode jjtn000 = new SimpleNode(JJTQUANTIFIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Quantifiable */
        try {
/*@egen*/
	Basic() [Quantifier()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Quantifier(): {/*@bgen(jjtree) Quantifier */
  SimpleNode jjtn000 = new SimpleNode(JJTQUANTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Quantifier */
        try {
/*@egen*/
	<QUANTIFIER> |
	<OPEN_REPEAT> (Number() ["," [Number()]] | "," Number()) <CLOSE_REPEAT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Basic() : {/*@bgen(jjtree) Basic */
  SimpleNode jjtn000 = new SimpleNode(JJTBASIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Basic */
        try {
/*@egen*/
	<CHARACTER> |
	<ANY> |
	<NUMBER> |
	<OPEN_SET> [<NEG>] Set() <CLOSE_SET> |//[SET] [^SET]
	<OPEN_GROUP> RegExp() <CLOSE_GROUP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 		//(RegExp)
}

void Set() : {/*@bgen(jjtree) Set */
  SimpleNode jjtn000 = new SimpleNode(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Set */
        try {
/*@egen*/
	(<CHARACTER> | <NUMBER>) ["-" (<CHARACTER> | <NUMBER>)] [Set()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number() : {/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	<NUMBER> [Number()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
