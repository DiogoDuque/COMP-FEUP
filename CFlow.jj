options
{
	LOOKAHEAD=2;
	FORCE_LA_CHECK=true;
}

PARSER_BEGIN(CFlow)

	public class CFlow {
		public static void main(String args[]) throws ParseException {
			if(args.length != 1){
				System.out.println("usage: cflow <program_path>");
				return;
			}
			String path = args[0];
			System.out.print("Write the regex: ");
			CFlow regexpRecog = new CFlow(System.in);
			regexpRecog.Recognize();
		}
	}
PARSER_END(CFlow)

SKIP:
{
" " | "\t" | "\r"
}

TOKEN:
{
	<LINESTART: 	<NEG>> |
	<LINEEND: 		"$"> |
	<OR:			"|"> |
	<QUANTIFIER:	("+" | "*" | "?")> |
	<NEG:			"^"> |
	<OPEN_GROUP:	"("> |
	<CLOSE_GROUP:	")"> |
	<OPEN_SET:		"["> |
	<CLOSE_SET:		"]"> |
	<OPEN_REPEAT:	"{"> |
	<CLOSE_REPEAT:	"}"> |
	/*TODO:
	!
	\
	{}
	*/
	<CHARACTER:		(["A"-"Z"] | ["a"-"z"])> |
	<NUMBER:		["0"-"9"]> |
	<ANY:			(".")> |

  	<LF: "\n">
}

void Recognize() : {}
{
	[<LINESTART>] RegExp() [<LINEEND>] <LF>
}

void RegExp() : {}
{
	Quantifiable() [[<OR>] RegExp()]
}

void Quantifiable() : {}
{
	Basic() [Quantifier()]
}

void Quantifier() : {}
{
	<QUANTIFIER> |
	<OPEN_REPEAT> Number() ["," [Number()]] <CLOSE_REPEAT>
}

void Basic() : {}
{
	<CHARACTER> |
	<ANY> |
	<OPEN_SET> [<NEG>] Set() <CLOSE_SET> |//[SET] [^SET]
	<OPEN_GROUP> RegExp() <CLOSE_GROUP> 		//(RegExp)
}

void Set() : {}
{
	<CHARACTER> ["-" <CHARACTER>] [Set()]
}

void Number() : {}
{
	<NUMBER> [<NUMBER>]
}
