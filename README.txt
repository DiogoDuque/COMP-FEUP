Project Title: P3 - cflow



Group: G33
NAME1: Catarina Correia, 	NR1: up201405765, GRADE1: <>, CONTRIBUTION1 <>
NAME2: Diogo Duque, 		NR2: up201406274, GRADE2: <>, CONTRIBUTION2 <>
NAME3: Jo√£o Silva, 			NR3: up201405490, GRADE3: <>, CONTRIBUTION3 <>


SUMMARY:
A tool to generate an automaton to check if the program execution control flow is according to the one specified as a regular expression. The tool parses the regular expression and generates the code to implement the automaton. The tool assumes that the code of the program has comments at the beginning of every BasicBlock, assigning the BasicBlock an ID. The automaton generated by the tool consists in a Java class that receives the info (BasicBlock id) from the instrumented points and processes it accordingly.


EXECUTE:
0. If necessary, clone the project using "git clone https://github.com/DiogoDuque/COMP-FEUP.git".
1. Enter the root directory of the project and run cflow to generate the DFA parser for a regex. Ex: "./cflow "A(BCE|BDE)+F" examples/1/input examples/1/output"
2. Go to the root folder of the example and execute the "run" script to process the program through the tool. Ex: "cd examples/1/; ./run".
3. You can already see in the result in the Terminal. However, if you want to see more information, do "firefox html/index.html".


DEALING WITH SYNTACTIC ERRORS: (Describe how the syntactic error recovery of your tool does work. Does it exit after the first error?)
Everytime a syntactic error happens, an exception is thrown showing what the problem was. Ex: if the problem was in the regular expression, the exception shows the "wrong symbol" and symbols that would be correct; if the input folder does not exist, 
LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM


SEMANTIC ANALYSIS: (Refer the possible semantic rules implemented by your tool.)
LOREM IPSUM 


INTERMEDIATE REPRESENTATIONS (IRs): (for example, when applicable, briefly describe the HLIR (high-level IR) and the LLIR (low-level IR) used, if your tool includes an LLIR with structure different from the HLIR)
Lorem ipsum


CODE GENERATION: (when applicable, describe how the code generation of your tool works and identify the possible problems your tool has regarding code generation.)
Lorem ipsum


OVERVIEW: (refer the approach used in your tool, the main algorithms, the third-party tools and/or packages, etc.)
In our approach to this problem, we first started by defining the grammar for the regular expressions. If the regex is not accepted, the program is immediatly stopped. After the regex is accepted, we get the corresponding AST. After that, the AST is parsed into an epsilon-NFA, which is later transformed into a DFA (for performance and simplification purposes, or else the tool could become slow and too complex when running the tool with the program).
While we were developing, we used the GraphStream library for visualizing the automatons as graphs, as it helped us to visualize our progress and made debugging easier. However, it the user still wants to see the graphs (either for the NFA or DFA), it would just need to uncomment the 2 "display()" calls on CFlow's "main()". We also used Kadabra for the LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM LOREM IPSUM 


TESTSUITE AND TEST INFRASTRUCTURE: (Describe the content of your testsuite regarding the number of examples, the approach to automate the test, etc.)
Lorem ipsum


**TASK DISTRIBUTION: (Identify the set of tasks done by each member of the project.)
Lorem ipsum


**PROS: (Identify the most positive aspects of your tool)
Lorem ipsum


**CONS: (Identify the most negative aspects of your tool)
Lorem ipsum

