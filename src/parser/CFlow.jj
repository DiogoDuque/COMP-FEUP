/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CFlow.jj */
/*@egen*/options
{
	LOOKAHEAD=2;
	FORCE_LA_CHECK=true;
}

PARSER_BEGIN(CFlow)
package parser;

import java.io.StringReader;

import automata.NFA;

public class CFlow/*@bgen(jjtree)*/implements CFlowTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCFlowState jjtree = new JJTCFlowState();

/*@egen*/
	public static void main(String args[]) throws ParseException {
		System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");

		if(args.length != 1){
			System.out.println("usage: cflow <regex>");
			return;
		}
		String regex = args[0];	
		StringReader reader = new StringReader(regex);

		CFlow cflow = new CFlow(reader);
		SimpleNode root = cflow.RegExp();

		NFA nfa = NFA.init(root);
		nfa.display();
	}
}
	
PARSER_END(CFlow)

SKIP:
{
	" "
	|
	"\t"
	|
	"\r"
}

TOKEN:
{
	<LINESTART: "^">
	|
	<LINEEND: "$">
	|
	<OR: "|">
	|
	<QUANTIFIER: "?">
	|
	<OPEN_GROUP: "(">
	|
	<CLOSE_GROUP: ")">
	|
	<OPEN_SET: "[">
	|
	<CLOSE_SET: "]">
	|
	<OPEN_REPEAT: "{">
	|
	<CLOSE_REPEAT: "}">
	|
	<KLEEN_CLOSURE: "*">
	|
	<PLUS: "+">
	|
	<CHARACTER: (["A"-"Z"] | ["a"-"z"])>
	|
	<NUMBER: ["0"-"9"]>
	|
	<ANY: ".">
	|
  	<LF: "\n">
}

SimpleNode RegExp()            :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	Expr() [Union()/*@bgen(jjtree) #Union( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTUNION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
        }
/*@egen*/
	{
		jjtn001.value = "|";
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/
	         ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Union()      : {}
{
	<OR> Expr()
}

void Expr()      : {}
{
	BasicExp() [/*@bgen(jjtree) #Concat( 2) */
                    {
                      SimpleNode jjtn001 = new SimpleNode(JJTCONCAT);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/Expr()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/           ]
}

void BasicExp()      :
{
	Token t;
}
{
	ElementaryRegex() [(t = "*" | t = "+" | t = "?")/*@bgen(jjtree) #Repeat( 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTREPEAT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
        }
/*@egen*/
	{
		jjtn001.value = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/
	          ]
}

void ElementaryRegex()      : {}
{
	Group()
	|
	<ANY>
	|
	<LINEEND>
	|
	Set()
	|
	Char()
}

void Char():
{/*@bgen(jjtree) Char */
        SimpleNode jjtn000 = new SimpleNode(JJTCHAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t1, t2;
}
{/*@bgen(jjtree) Char */
        try {
/*@egen*/
	t1 = <NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.value = t1.image;
	}
	|
	t2 = <CHARACTER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.value = t2.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Group()      : {}
{
	"(" RegExp() ")"
}

void Set()      : {}
{
	PositiveSet()
	|
	NegativeSet()
}

void PositiveSet(): {/*@bgen(jjtree) PositiveSet */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSITIVESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PositiveSet */
        try {
/*@egen*/
	"[" SetItems() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NegativeSet(): {/*@bgen(jjtree) NegativeSet */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATIVESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NegativeSet */
        try {
/*@egen*/
	"[^" SetItems() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SetItems()      : {}
{
	SetItem() [SetItems()]
}

void SetItem()      : {}
{
	Range() 
	|
	Char()
}

void Range(): {/*@bgen(jjtree) Range */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Range */
        try {
/*@egen*/
	Char() "-" Char()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}